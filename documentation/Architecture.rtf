{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Bookman Old Style;}{\f1\fnil\fcharset2 Symbol;}}
{\colortbl ;\red75\green172\blue198;}
{\*\listtable 
{\list\listhybrid
{\listlevel\levelnfc0\leveljc0\levelstartat1{\leveltext\'02\'00.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc4\leveljc0\levelstartat1{\leveltext\'02\'01.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc3\leveljc0\levelstartat1{\leveltext\'02\'02.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc2\leveljc0\levelstartat1{\leveltext\'02\'03.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc1\leveljc0\levelstartat1{\leveltext\'02\'04.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc0\leveljc0\levelstartat1{\leveltext\'02\'05.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc4\leveljc0\levelstartat1{\leveltext\'02\'06.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc3\leveljc0\levelstartat1{\leveltext\'02\'07.;}{\levelnumbers\'01;}\jclisttab\tx0}
{\listlevel\levelnfc23\leveljc1\levelstartat1{\leveltext\'01\'B7;}{\levelnumbers;}\f1\jclisttab\tx0}\listid1 }}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
{\*\generator Riched20 6.3.9600}\viewkind4\uc1 
\pard\sl240\slmult1\qj\cf1\f0\fs32\lang9 Bore Logger Hybrid App\par
\par
\cf0\b\fs18 Description\b0\par
Wherever the words "this app" or "the app" are used, they refer to the program named above. Wherever the words "the system" are used, it refers to the app, server, database collectively.\par
\fs28\par
Part II: Architecture\par
\b High-level Organization (UI)\par
\b0 First, a user is presented with the main view. The main view provides an iterface with buttons, each corresponding to a central feature of the app. They will be classified by category and labeled by function:\par

\pard 
{\listtext\f0\u10625?\tab}\ls1\ilvl8\fi-360\li720\sl240\slmult1\qj\b Bore Log\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj Create\par
{\pntext\f1\'B7\tab}Continue\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj\b Bore Journal\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj Create\par
{\pntext\f1\'B7\tab}Continue\par
{\pntext\f1\'B7\tab}Journal to Log\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj\b PDF\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj Create\par

\pard\sl240\slmult1\qj As far as "menu options" or "settings," it will remain to be seen what features can be added once the core features are validated. From each button, the user is taken to the corresponding view where they will be given an interface that facilitates the task at hand.\par
\par
I. \b Bore Log --> Create\b0\par
\tab The user will be given a view with fields to input the following data (data type is in parenthesis):\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sl240\slmult1\qj Customer (string)\par
{\pntext\f0 2.\tab}Location (string)\par
{\pntext\f0 3.\tab}Date (string)\par
{\pntext\f0 4.\tab}Lenght of bore (string)\par
{\pntext\f0 5.\tab}Length of drill pipe (string)\par
{\pntext\f0 6.\tab}List of locates (\b array\b0 )\par

\pard\sl240\slmult1\qj\tab It's important to note that the entry of the array value will most likely be in its own view, accessible after the preliminary data is entered and confirmed. This view is referred to herafter as "the locates view."\par
\tab Each locate will contain at least a depth (string) and possibly a crossing (string). The locates can be pushed or popped to or from the array on user interactions like editting, changing the order, etc. Ionic offers a lot of functionality through its list API.\par
\tab Once a bore log is done, the user can submit it through the same view as where the locates are entered. The bore log is saved to the database through interfacing with server routes. This entails a total of three views from the main view to the general information view and finally the locates view.\par
\par
II. \b Bore Log --> Continue\b0\par
\tab Continuing a bore log is going to take the user to a view where they are presented with a list of bore log entries present on the database. This requires an available connection to the server since the server is the interface to the database. The database should respond with JSON, but I'm unsure as of writing this if it returns all documents in an array.\par
\tab The user can select from the list (ng-repeat would be great for creating this list). Selecting a bore log to continue will "load" it as the "active" log and take the user to the same locates view as though they were creating a new bore log, but they will be adding and editing the bore log selected on the previous view.\par
\par
III. \b Bore Jounal --> Create\b0\par
\tab This will present the user with a view in which they input two pieces of data: a \b customer \b0 name and a \b location \b0 of the job \line (both strings). After these are entered, the user will be presented with the locates view. Being a bore journal, each locate enter will be appended with the current date and time (or maybe just the time if that date had already been recorded once). The user can end entering locates at any time by touching a "Done" button or simply exiting the app. This means that however the data is recorded, it must be persisted at every entry of data.\par
\par
IV. \b Bore Journal --> Continue\b0\par
\tab Much like continuing a bore log, this option presents the user the same selection view as well, the difference being that the user is choosing from bore journals this time rather than bore logs. Selecting a bore journal makes that bore journal "active" and takes the user to the locates view where they can continue adding and editing locates for that bore journal. The user can then end/resume a bore journal as convenient.\par
\par
V. \b Bore Journal --> Journal to Log\b0\par
\tab This option presents the user with a view that enables them to supply missing data required by a bore log (for example, at this time, data like the length of the bore will be available) and in turn convert the bore journal into a bore log (which then can be used to create a PDF billable report).\par
\par
VI. \b PDF --> Create\b0\par
\tab This option presents the user with the selection view where they can select a bore log. Selecting a bore log will present them with a view that lets them review the data contained in that bore log. The user can confirm the data once any necessary changes (if any) have been made. Once confirmed, the data is passed to a module capable of formatting it as a PDF file. I don't know where this PDF file will be stored, but there was a tutorial I saw earlier where a blob was used to create and immediately download a file. I hope to find that information by the time construction comes to this point.\par
\par
This summaries the basics of the UI architecture and its functiality.\par
\par

\pard\sl240\slmult1\qj\b High-level Organization (Backend)\par

\pard\sl240\slmult1\qj\b0 The backend will follow typical Node.js boilerplate, using Express to handle routes. I'll break functionality into modules which during both development and deployment will be separate from all of the ionic stuff. The APIs for each module will be exposed following the CommonJS pattern of exporting and requiring. Whenever possible, I'll use npm modules to accomplish the functionality I'm trying to achieve.\par
\par
\b Modules\b0\par
The modularity of the system can be imagined given the tasks that must be accomplished by this system.\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sl240\slmult1\qj Angular JS Modules (by feature)\par
{\pntext\f0 2.\tab}Database interaction (backend)\par
{\pntext\f0 3.\tab}PDF creation\par
{\pntext\f0 4.\tab}Authentication\par
{\pntext\f0 5.\tab}Web Server\par
{\pntext\f0 6.\tab}Web Socket Server\par

\pard\sl240\slmult1\qj And so forth... each module should contain a README.txt explaining their API.\par
\par
\b Data Design\par
\b0 The predominant object of this system will be:\par
\par
myObject = \{\par
\tab type: String, (either "log," or "journal")\par
\tab customer: String,\par
\tab date: \{type: Date, default: Date.now\},\par
\tab location: String,\par
\tab lengthOfBore: Number\par
\tab product: String,\par
\tab pipeLenth: Number,\par
\tab locates: Array,\par
\tab ...\par
\tab //Auto-generated\par
\tab createdOn: \{type: Date, default: Date.now\},\par
\tab createdBy: String,\par
\tab ...\par
\}\par
\par
Each locate stored in the @locates array:\par
\par
locate = \{\par
\tab feet: Number,\par
\tab inches: Number,\par
\tab crossing: String (can be null)\par
\}\par
\par
\b Database design\par
\b0 The MongoDB documents stored will all follow the myObject schema shown above. MongoDB is highly agile and can adapt to any necessary changes that the future may require.\par
\par
\par
}
 